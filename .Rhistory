for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
library(datasets)
data(iris)
?iris
head(iris)
head(iris3)
?tapply
tapply(iris,Species, mean)
tapply(iris,iris$Species, mean)
swirl()
load(swirl)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
play()
class(iris)
dim(iris)
cls_list2 <- lapply(iris, class)
str(cls_list2)
cls_list2
lapply(iris$Species, mean)
nxt()
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
play()
mean(iris$Sepal.Length)
dim(iris)
head(iris)
nxt()
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
play()
help()
quit()
nxt()
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
play()
table(iris$Species)
nxt()
play()
?table
nxt()
table(flags$animate)
play()
?data.frame
a_data_frame <- data.frame()
a_data_frame <- data.frame(
x = letters[1:5],
y = rnorm(5),
z = runif(5) > 0.5,
animate = c(0,1,0,0,NA),
row.names = c("Margaret", "Allen","Bob","Suzy", "Sam"))
a_data_frame
table(a_data_frame$animate)
nxt()
tapply(flags$animate, flags$landmass, mean)
play()
length(flags$animate)
length(flags$landmass)
names(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
?apply
apply(iris[,1:4],2,mean)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
names(mtcars)
with(mtcars, tapply(mpg,cyl,mean))
?with
split(mtcars, mtcars$cyl)
?apply
names(mtcars)
apply(mtcars,2,mean)
sapply(mtcars,cyl,mean)
sapply(mtcars,mean)
averageHorsePowerByCylinder <- with(mtcars, tapply(hp,cyl,mean))
averageHorsePowerByCylinder
averageHorsePowerByCylinder[3]
averageHorsePowerByCylinder[[3]]
averageHorsePowerByCylinder[[3]]-averageHorsePowerByCylinder[[1]]
?solv
?solve
ls
ls()
shape_mat
?matrix
a_matrix <- matrix(c(1,2,4,2), nrow=2, ncol=2)
a_matrix
solve(a_matrix)
solve(a_matrix) %*% a_matrix
getwd()
library(swirl)
swirl()
play()
ls()
nxt()
tapply(flags$population,flags$red,summary)
play()
str(flags)
nxt()
tapply(flags$population, flags$landmass, summary)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
play()
set.seed(1)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
set.seed(1)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
nxt()
sample(1:20,10)
LETTERS
play()
str(LETTERS)
nxt()
sample(LETTERS,26)
SAMPLE(LETTERS)
sample(LETTERS)
flips<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100,sd=25)
play()
?rpois
rpois(5,10)
mean(rpois(5,10))
nxt()
rpois(5,10)
my_pois <- replicate(100, rpois(5,10))
my_pois
play()
str(my_pois)
?transpose
?t
t(my_pois)
nxt()
cm<-colMeans(my_pois)
hist(cm)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
set.seed(10)
x<-rbinom(100,1,0.5)
e <- rnorm(100,0,2)
y<-0.5+2*x+e
summary(y)
plot(x,y)
set.seed(1)
x<-rnorm(100)
log.mu<-0.5+.3*x
str(log.mu)
str(exp(log.mu))
?exp
exp(1)
2^2
2**2
3^3
3**3
exp(3)
exp(27)
exp(1)^3
y<-rpois(100,exp(log.mu))
?rpois
summary(y)
plot(x,y)
hist(log.mu)
plot(x,y)
str(x)
?sample
system.time(readLines("http://www.jhsph.edu"))
?svd
?outer
?dim
?outer
hilbert<-function(n){
i <- 1:n
1/outer(i-1,i,"+")
}
x<-hilbert(1000)
str(x)
head(x)
x[,1:10]
x[1:6,1:10]
system.time(svd(x))
3/20
2/20
15/20
2/20
16/20
?tapply
1100 + c(-1,1)*30/sqrt(8)*qt(.975,9-1)
2 *sqrt(9-1)/qt(.975,9-1)
sqrt(8)
library(datasets);data(mtcars)
y <- mtcars$mpg #outcome
n <- length(y)
for (i in c(2,8:11)){
mtcars[,i]<-as.factor(mtcars[,i]) #qualitative variables
}
levels(mtcars$am) <- c("auto","man") #give levels more descriptive names
summary(mtcars)
library(ggplot2)
g <- ggplot(mtcars,aes(x=am,y=mpg))
g + geom_boxplot()+
labs(title="Fuel Efficiency Distribution by Transmission")+
labs(x="Transmission Type",y="MPG")
manMPG <- mtcars$mpg[which(mtcars$am=="man")]
autoMPG <- mtcars$mpg[which(mtcars$am=="auto")]
t.test(manMPG, autoMPG)
(mean(manMPG)-mean(autoMPG))*sqrt(13)/sd(manMPG)
?t.test
t.test(manMPG, autoMPG, paired=FALSE, var.equal = TRUE)
t.test(manMPG, autoMPG, paired=FALSE, var.equal = FALSE)
testCriteria <- round(qt(.95,n-1),3)
testCriteria
df <- ((var(manMPG)/length(manMPG) + var(autoMPG)/length(autoMPG))^2)/
(
(var(manMPG)/(length(manMPG)))^2/(length(manMPG)-1)+
((var(autoMPG)/length(autoMPG))^2/(length(autoMPG)-1))
)
df
testCriteria <- round(qt(.95,df),3)
testCriteria
sqrt(var(manMPG)/length(manMPG)+var(autoMPG)/length(autoMPG))
mean(manMPG)-mean(autoMPG) + c(-1,1) * qt(.975,df) * sqrt(var(manMPG)/length(manMPG)+var(autoMPG)/length(autoMPG))
standError <- sqrt(var(manMPG)/length(manMPG)+var(autoMPG)/length(autoMPG))
mean(manMPG)-mean(autoMPG) + c(-1,1) * qt(.975,df) * standError
(mean(manMPG)-mean(autoMPG))/standError
(mean(manMPG)-mean(autoMPG))/standError
qt(.975,df)
mean(manMPG)-mean(autoMPG) + c(-1,1) * qt(.95,df) * standError
(mean(manMPG)-mean(autoMPG))/standError
t.test(manMPG, autoMPG, paired=FALSE, var.equal = FALSE)
t.test(manMPG, autoMPG, alternative = "greater", paired=FALSE, var.equal = FALSE)
standError <- sqrt(var(manMPG)/length(manMPG)+var(autoMPG)/length(autoMPG))
# Test Statistic
(mean(manMPG)-mean(autoMPG))/standError
round(qt(.975,df),3)
t.test(manMPG, autoMPG, paired=FALSE, var.equal = FALSE)
(mean(manMPG)-mean(autoMPG))/standError
mean(manMPG)-mean(autoMPG) + c(-1,1) * qt(.975,df) * standError
round(qt(.975,df),3)
(mean(manMPG)-mean(autoMPG))/standError
mean(manMPG)-mean(autoMPG) + c(-1,1) * qt(.975,df) * standError
fitBoth3 <- lm(mpg ~ hp + am + am*hp,data=mtcars)
plot(mtcars$hp,mtcars$mpg,type="n",main="Transmission Type Fuel Economy by Horsepower",
cex.main=.8,
ylab="MPG",
xlab="Horsepower")
points(mtcars$hp,mtcars$mpg,pch=19,col=((mtcars$am=="auto")*1+1))
abline(c(fitBoth3$coeff[1],fitBoth3$coeff[2]),col="red",lwd=3)
abline(c(fitBoth3$coeff[1]+fitBoth3$coeff[3],fitBoth3$coeff[2]+fitBoth3$coeff[4]),col="black",lwd=3)
legend("topright",c("Manual","Automatic"),
pch=c(19,19),
col=c("black","red"),
cex=.8)
fitBoth3a <- lm(mpg ~ I(hp-mean(hp)))
fitBoth3a <- lm(mpg ~ I(hp-mean(hp)),data=mtcars)
summary(fitBoth3a)
summary(fitBoth3)
mean(hp)
mean(mtcars$hp)
with(mtcars, plot(hp, mpg))
abline(fitBoth3a)
with(mtcars, plot(hp-mean(hp), mpg))
abline(fitBoth3a)
summary(fitBoth3a)
mean(hp)
mean(mtcars$hp)
?predict
predict.lm(fitBoth3a,newdata=mean(mtcars$hp))
coef(fitBoth3a)
mean(mtcars$hp)*coef(fitBoth3a)[2]+coef(fitBoth3a)[1]
coef(fitBoth3a)[1]
fitBoth3a <- lm(mpg ~ I(hp-mean(hp))+am,data=mtcars)
summary(fitBoth3a)
fitBoth3a <- lm(mpg ~ I(hp-mean(hp))+am + am*I(hp-mean(hp)),data=mtcars)
summary(fitBoth3a)
summary(fitBoth3)
fitBoth2 <- lm(mpg ~ I(hp-mean(hp)) + am,data=mtcars)
summary(fitBoth2)
summary(fitBoth3)
fitBoth <- lm(mpg ~ wt + am, data=mtcars)
plot(mtcars$wt,mtcars$mpg,type="n")
points(mtcars$wt,mtcars$mpg,pch=19,col=((mtcars$am=="auto")*1+1))
abline(c(fitBoth$coeff[1],fitBoth$coeff[2]),col="red",lwd=3)
summary(fitBoth)
abline(c(fitBoth$coeff[1]+fitBoth$coeff[3],fitBoth$coeff[2]),col="black",lwd=3)
fitBoth <- lm(mpg ~ wt + am + am*wt, data=mtcars)
summary(fitBoth)
plot(mtcars$wt,mtcars$mpg,type="n")
points(mtcars$wt,mtcars$mpg,pch=19,col=((mtcars$am=="auto")*1+1))
abline(c(fitBoth$coeff[1],fitBoth$coeff[2]),col="red",lwd=3)
abline(c(fitBoth$coeff[1]+fitBoth$coeff[3],fitBoth$coeff[2]+fitBoth$coeff[4]),col="black",lwd=3)
library(datasets)
data(diamond)
data(diamonds)
?datasets
library(help ="datasets")
library(ggplot2)
data(diamonds)
str(diamonds)
qplot(carat, data=diamonds)
g <- ggplot(carat,data=diamonds,binwidth=.1)
?ggplot
g <- ggplot(diamonds, aes(carat))
g
?geom
?geom_hist
qplot(carat,data=diamonds,binwidth=.1)
g<- ggplot(diamonds,aes(carat))
g + geom_histogram(colour="black",binwidth=.01)
g + geom_histogram(binwidth=.01)
g + geom_histogram(binwidth=.5)
g + geom_histogram(binwidth=.5,colour="black")
a <- ggplot(diamonds,aes(depth))
a <- geom_histogram(aes(y=..density),binwidth=.2)
a <- geom_histogram(aes(y=..density),binwidth=.2)
a <- ggplot(diamonds,aes(depth))
a + geom_histogram(aes(y=..density),binwidth=.2)
a + geom_histogram(aes(y=..density..),binwidth=.2)
a + geom_histogram(aes(y=..density..))
a + geom_histogram(aes(y=..density..), binwidth=.2) +
facet_wrap(~cut)
head(diamonds)
tail(diamonds)
summary(diamonds)
a + geom_freqpoly()
a + geom_freqpoly(binwidth=.2)
a + geom_freqpoly(binwidth=.2, fill=cut)
a + geom_freqpoly(binwidth=.2, color=cut)
a + geom_freqpoly(binwidth=.2, aes(color=cut))
a + geom_density(binwidth=.2,aes(color=cut))
z
i <- ggplot(diamonds, aes(price))
i + geom_histogram()
i + geom_histogram(colour="black")
i + geom_histogram(colour="black", binwidth=100)
i + geom_histogram(colour="black", binwidth=500)
i + geom_histogram(binwidth=500) + facet_wrap(~cut)
i + geom_histogram(binwidth=100) + facet_wrap(~cut)
i + geom_density(binwidth=500,aes(color=cut))
j <- ggplot(diamonds,aes(carat,price))
j + geom_point(aes(color = cut)) # scatter plot of three variables
j + geom_bin2d()
install.packages("hexbin")
j + geom_hex() #need to install package hexbin
j + geom_density2d() #a 2d density plot or "contour" plot
j + geom_density2d() + geom_point()
j + geom_point() geom_density2d() # plot on top of raw data
j + geom_point() + geom_density2d() # plot on top of raw data
j + geom_smooth(aes(color=cut),se =FALSE)
j + geom_smooth(aes(color=cut))
j + geom_smooth(aes(color=cut),se=FALSE)
j + geom_point() + geom_smooth(aes(color=cut),se=FALSE)
j + geom_smooth(aes(color=cut),se=FALSE)
#best fit line to data, faceted by cut
j + geom_smooth(aes(color=cut),se=FALSE, method=lm)
j + geom_smooth(aes(color=cut), method=lm) #linear model
j + geom_smooth(aes(color=cut), se=FALSE, method=lm) #linear model
j + geom_point(aes(color=cut, size=I(.5), alpha = I(.1)))# need to wrap with I(), which stands for "as is"
j <- ggplot(diamonds,aes(carat,price, size=I(.5),alpha=I(.1)))
j + geom_point(aes(color = cut))
j + geom_point(aes(size=I(0.5), alpha = I(0.1)))
qplot(diamonds, aes(carat,price,alpha=I(0.1),size=I(0.5)))# need to wrap with I(), which stands for "as is"
qplot(carat,price,alpha=I(0.1),size=I(0.5),data=diamonds)# need to wrap with I(), which stands for "as is"
qplot(carat,price,alpha=I(0.1),size=I(0.8),data=diamonds)# need to wrap with I(), which stands for "as is"
library(ggplot2)
data(diamonds)
j <- ggplot(diamonds,aes(carat,price))
j + geom_hex() #need to install package hexbin
j + geom_hex() + facet_wrap(~cut)
summary(diamonds)
t
s
s <- ggplot(diamonds, aes(color,clarity))
s + geom_hex()
s <- ggplot(diamonds, aes(color,cut))
s + geom_hex()
s + geom_bin2d()
s + geom_bin2d() + facet_wrap(~cut)
s <- ggplot(diamonds, aes(color,clarity))
s + geom_bin2d() + facet_wrap(~cut)
s + geom_hex() + facet_wrap(~cut)
s + geom_bin2d() + facet_wrap(~cut)
j + geom_density2d()
s + geom_density2d()
qplot(color,clarity,alpha=I(0.1),size=I(1),data=diamonds)
qplot(color,clarity,alpha=I(0.1),size=I(1),geom="jitter",data=diamonds)
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
head(spam)
plot(density(spam$money[spam$type=="nonspam"]),col="blue",
xlab="Frequency of 'Money'",
main="")
lines(density(spam$money[spam$type=="spam"]),col="red")
plot(density(spam$charExclamation[spam$type=="nonspam"]),col="blue",
xlab="Frequency of '!'",
main="")
lines(density(spam$charExclamation[spam$type=="spam"]),col="red")
plot(density(spam$free[spam$type=="nonspam"]),col="blue",
xlab="Frequency of 'free'",
main="")
lines(density(spam$free[spam$type=="spam"]),col="red")
plot(density(spam$your[spam$type=="nonspam"]),col="blue",
xlab="Frequency of 'your'",
main="")
lines(density(spam$your[spam$type=="spam"]),col="red")
abline(v=0.5,col="black")
prediction <- ifelse(spam$your > .5,"spam","nonspam")
table(prediction,spam$type)
?table
table(prediction,spam$type)/length(spam$type)
library(kernlab)
data(spam)
library(ggplot2)
version
packageStatus()
?update.packages
update.packages(checkBuilt=TRUE)
packageStatus()
library(ggplot2)
data(diamonds)
qplot(carat,data=diamonds,binwidth=.1)
j <- ggplot(diamonds,aes(carat,price))
j + geom_hex() + facet_wrap(~cut)
shiny::runApp('Developer/DataScienceJHU/DataProducts')
setwd("~/Developer/Data Science with R")
data(titantic2)
titanic2 <- read.csv("data/titanic2.csv",
stringsAsFactors = FALSE)
titanic2 <- read.csv("titanic2.csv",
stringsAsFactors = FALSE)
head(titanic2)
library(reshape2)
titanic3 <- melt(titanic2, id=c("class","age","fate"))
titanic3
titanic3 <- melt(titanic2, id=c("class","age","fate"),
variable.name="gender",
value.name="n")
head(titanic3)
titanic4 <- dcast(titanic3, class + age + gender ~ fate,
value.var = "n")
titanic4
?sum
survivalRate <- sum(titanic4$survived)/sum(titanic$perished + titanic$survived)
survivalRate <- sum(titanic4$survived)/sum(titanic4$perished + titanic4$survived)
?lapply
?tapply
titanic4$rate <- titanic4$survived/(titanic4$perished + titanic4$survived)
titanic4
titanic4$rate <- round(titanic4$survived/(titanic4$perished + titanic4$survived),2)
titanic4
library(devtools)
setwd("~/Developer/DataScienceJHU/DataProducts")
install_github('slidify','ramanathv')
install_github('slidify','ramanathv/slidify')
install_github('slidify','ramanathv/slidify/slidify')
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
setwd('~/slidify')
setwd('/slidify')
setwd('~Developer/DataScienceJHU/DataProducts/slidify')
author("first_deck")
